import { useState, useEffect, useRef } from 'react';
import { posts } from '../data/users';
import './Profile.css';

function Profile({ user, onLogout }) {
  const [userPosts, setUserPosts] = useState([]);
  const [newPost, setNewPost] = useState('');
  const [isFriendsListVisible, setIsFriendsListVisible] = useState(false);
  const fileInputRef = useRef(null);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const userPostsData = posts[user.id] || [];
    setUserPosts([...userPostsData]);
  }, [user.id]);
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        setIsFriendsListVisible(false);
      }
    };
    
    if (isFriendsListVisible) {
      document.addEventListener('keydown', handleEscape);
    }
    
    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isFriendsListVisible]);

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  useEffect(() => {
    if (isFriendsListVisible) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isFriendsListVisible]);
  
  const handleAddPost = (e) => {
    e.preventDefault();
    if (!newPost.trim()) return;
    
    const post = {
      id: Date.now(),
      userId: user.id,
      content: newPost,
      likes: 0,
      comments: 0,
      date: new Date().toISOString().split('T')[0]
    };
    
    setUserPosts([post, ...userPosts]);
    setNewPost('');
  };
  
  const handleAvatarClick = () => {
    fileInputRef.current.click();
  };

  const handleAvatarChange = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
      return;
    }

    const formData = new FormData();
    formData.append('avatar', file);
    formData.append('userId', user.id);

    try {
      const response = await fetch('http://localhost:5000/api/users/upload-avatar', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞');
      }

      const data = await response.json();
      
      if (data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º URL –∞–≤–∞—Ç–∞—Ä–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        const newAvatarUrl = `http://localhost:5000${data.avatarUrl}`;
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ Redux
        console.log('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', newAvatarUrl);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        window.location.reload();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞');
    }
  };

  return (
    <div className="profile-container">
      <div className="profile-content">
        <aside className="profile-sidebar">
          <div className="profile-sidebar-content">
            <div className="profile-info">
              <div className="profile-avatar" onClick={handleAvatarClick}>
                <img src={user.avatar || "https://via.placeholder.com/150"} alt="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" />
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleAvatarChange}
                  accept="image/*"
                  style={{ display: 'none' }}
                />
              </div>
              <h2>{user.name}</h2>
              <p>{user.email}</p>
              <div className="profile-stats">
                <div className="stat" onClick={() => setIsFriendsListVisible(true)} style={{ cursor: 'pointer' }}>
                  <span className="stat-value">{user.friends || 0}</span>
                  <span className="stat-label">–î—Ä—É–∑—å—è</span>
                </div>
                <div className="stat">
                  <span className="stat-value">{userPosts.length}</span>
                  <span className="stat-label">–ü–æ—Å—Ç—ã</span>
                </div>
                <div className="stat">
                  <span className="stat-value">{user.photos || 0}</span>
                  <span className="stat-label">–§–æ—Ç–æ</span>
                </div>
              </div>
              <button className="edit-profile-button">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</button>
            </div>
          </div>
        </aside>
        
        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π */}
        {isFriendsListVisible && (
          <>
            <div className="modal-overlay" onClick={() => setIsFriendsListVisible(false)}></div>
            <div className="friends-modal">
              <div className="friends-modal-header">
                <h3>–î—Ä—É–∑—å—è</h3>
                <button className="close-modal" onClick={() => setIsFriendsListVisible(false)}>‚úï</button>
              </div>
              <div className="friends-modal-content">
                <div className="friends-search">
                  <input type="text" placeholder="–ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π..." />
                </div>
                <div className="friends-grid">
                  {[
                    {
                      id: 1,
                      name: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
                      avatar: 'https://randomuser.me/api/portraits/women/2.jpg',
                      isOnline: true
                    },
                    {
                      id: 2,
                      name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                      avatar: 'https://randomuser.me/api/portraits/men/3.jpg',
                      isOnline: false
                    },
                    {
                      id: 3,
                      name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
                      avatar: 'https://randomuser.me/api/portraits/women/5.jpg',
                      isOnline: true
                    },
                    {
                      id: 4,
                      name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
                      avatar: 'https://randomuser.me/api/portraits/men/7.jpg',
                      isOnline: false
                    },
                    {
                      id: 5,
                      name: '–ï–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞',
                      avatar: 'https://randomuser.me/api/portraits/women/8.jpg',
                      isOnline: true
                    }
                  ].map(friend => (
                    <div key={friend.id} className="friend-item">
                      <div className="friend-avatar">
                        <img src={friend.avatar} alt={friend.name} />
                        <span className={`online-status ${friend.isOnline ? 'online' : 'offline'}`}></span>
                      </div>
                      <span className="friend-name">{friend.name}</span>
                      <button className="message-friend">–ù–∞–ø–∏—Å–∞—Ç—å</button>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </>
        )}
        
        <main className="profile-main">
          <div className="post-form-container">
            <form onSubmit={handleAddPost} className="post-form">
              <textarea
                value={newPost}
                onChange={(e) => setNewPost(e.target.value)}
                placeholder="–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?"
                rows="3"
              />
              <button type="submit">–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å</button>
            </form>
          </div>
          
          <div className="posts-container">
            <h3>–ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</h3>
            {userPosts.length > 0 ? (
              userPosts.map(post => (
                <div key={post.id} className="post">
                  <div className="post-header">
                    <div className="post-author">
                      <img src={user.avatar || "https://via.placeholder.com/40"} alt="–ê–≤–∞—Ç–∞—Ä" />
                      <div>
                        <h4>{user.name}</h4>
                        <span className="post-date">{post.date}</span>
                      </div>
                    </div>
                  </div>
                  <div className="post-content">
                    <p>{post.content}</p>
                  </div>
                  <div className="post-actions">
                    <button className="like-button">
                      <span>‚ù§Ô∏è</span> {post.likes}
                    </button>
                    <button className="comment-button">
                      <span>üí¨</span> {post.comments}
                    </button>
                    <button className="share-button">
                      <span>üîÑ</span> –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                    </button>
                  </div>
                </div>
              ))
            ) : (
              <p className="no-posts">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç!</p>
            )}
          </div>
        </main>
      </div>
    </div>
  );
}

export default Profile;